<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>time</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>time</h1>
    <p>
        ITime provides function to get the current system time and work with this time.
    </p>

    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/interface/time.h<br><br></td></tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#ITime">ITime</a><br>
                <br>
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#example">Code Example</a><br>
                <br>
            </td>
        </tr>
        <tr>
            <!--<td><b>Data types</b></td>
            <td>
                <a href="#timezone_id">Timezone IDs</a><br>
                <a href="#win_mapping">Windows timezone mapping</a><br>
                <a href="#copyright">Copyright</a><br>
                <br>
            </td>-->
        </tr>
    </table>   
    <h1>Classes</h1>
    <h2 id="ITime">ITime</h2>

    <h3>Public functions</h3>

    <dl>
        <dt>static ulong64 TimeStampMilliseconds()</dt>
        <dd>
            <h4>Return value</h4>
            Returns an utc timestamp in milliseconds.
        </dd>

        <dt>static size_t GetTimeStamp(char * buf, unsigned sz)</dt>
        <dd>
            <h4>Return value</h4>
            Returns localtime with this representation '''%Y-%m-%d %H:%M:%S''' inside
            the buffer pointed by buf. sz is the size of the provided buffer.
        </dd>

        <dt>static void FormatTimeStampISO(char * buf, unsigned length, ulong64 timeMs);</dt>
        <dd>
            Formats the timestamp in milliseconds to ISO Format "%Y-%m-%dT%H:%M:%SZ" inside the buffer pointed by buf.
            length is the size of the provided buffer.
        </dd>

        <dt>static void FormatTimeStampRFC1123(char * buf, unsigned length, ulong64 timeMs);</dt>
        <dd>
            Formats the timestamp in milliseconds to RFC1123 Format "Thu, 02 Mar 2017 07:36:51 GMT" inside the buffer pointed by buf.
            length is the size of the provided buffer.
        </dd>

        <dt>static bool ParseTimeZoneString(const char * tz, timezone_info_t & ti_out, int * errPos = NULL)</dt>
        <dd>
            Parses the in tz given POSIX time zone string and stores the result in ti_out. If everything was fine,
            true will be returned. If an error occures, the function will return false while errPos (if a pointer
            had been given) will hold the position inside the tz string, where the parsing error occures. In that
            case tha value of the ti_out structure is undefined. The ti_out structure holds all informations that
            are necessary to localize a time value in that time zone. So the structure must passed to the other
            functions until it hat been filled correctly with ParseTimeZoneString().
        </dd>

        <dt>static ulong64 TimeStampMilliseconds(timezone_info_t & ti)</dt>

        <dd>
            <h4>Return value</h4>
            Returns the current time in milliseconds, already calculated to the time zone with the infos given in ti.
        </dd>

        <dt>static ulong64 UTCTimeToLocalTime(ulong64 timeMsUtc, timezone_info_t & ti)</dt>

        <dd>
            <h4>Return value</h4>
            Returns the given utc time (in milliseconds) in the local time by using the time zone informations given by ti.
        </dd>
        
        <dt>static long64 GetMonotonicTime()</dt>
        <dd>
            Monotonic time represents the absolute elapsed wall-clock time since some arbitrary, fixed point in the past. It isn't affected by changes in the system time-of-day clock.
        </dd>

        <dt>static void GetTimeStruct(ulong64 timeMs, struct time_tm * t)</dt>
        <dd>
            Fills the time_tm structure pointed to by t with the values of the in milliseconds given time. Internally, gmtime() is used,
            so there will be no time zone calculation will be done.
        </dd>

        <dt>static void GetTimeStruct(ulong64 timeMs, struct time_tm * t, timezone_info_t & ti)</dt>
        <dd>
            The same as GetTimeStruct() above, with the difference, that the in milliseconds given time will at first calculated
            to the time zone with the informations given in ti.
            So actually it is the same as calling GetTimeStruct(UTCTimeToLocalTim(timeMs, ti), tm);
        </dd>

        <dt>static void FormatTimeStamp(char * buf, unsigned length, const char * formatStr, ulong64 timeMs)</dt>
        <dd>
            Formats the in milliseconds given time by using the given formatStr. The result will be placed in the given buffer buf.
            The parameter length is the length of the buffer. For a list of place holders to use in formatStr, read
            the strftime() documentation.
        </dd>
        
        <dt>static void FormatTimeStamp(char * buf, unsigned length, const char * formatStr, ulong64 timeMs, timezone_info_t & ti)</dt>
        <dd>
            The same as GetFormatedTimeStr() above, with the difference that the given time at first will be calculated to
            the time zone with the informations given in ti. So actually it is the same as calling
            GetFormatedTimeStr(buf, sizeof(buf), myFormatStr, UTCTimeToLocalTime(time, ti));
        </dd>
        
        <dt>static long64 TimeStructToMilliseconds(time_tm_t * ts)</dt>
        <dd>
            Converts a time_tm_t struct to total milliseconds.
        </dd>
        
        <dt>static bool NormalizeTimeStruct(time_tm_t * ts)</dt>
        <dd>
        </dd>
        
        <dt>static long64 RemoveTime(long64 timeStamp)</dt>
        <dd>
            <h4>Return value</h4>
            Removes the time portion of the millisecond timeStamp.
        </dd>
        
        <dt>static bool IsLeapYear(int year)</dt>
        <dd>
            <h4>Return value</h4>
            Returns true for years which are a leap year.
        </dd>
        
        <dt>static int GetDaysOfMonth(int month, int forYear)</dt>
        <dd>
            <h4>Return value</h4>
            Returns the count of days of month in year forYear.
        </dd>
    </dl>
    
    <h2>struct _timezone_info_t</h2>
    
    <h2>struct _time_tm_t</h2>

    <h2 id="example">Code Example</h2>
    <pre><code class="C++">
ulong64 tTime = ITime::TimeStampMilliseconds();

int pos;
ITime::timezone_info_t ti;
if (!ITime::ParseTimeZoneString("BRT+3", ti, &pos)) {
    printf("Parsing the POSIX TimeZone string failed at pos %u\n", pos);
    return;
}

char buf_utc[20];
char buf_loc[20];
ITime::FormatTimeStamp(buf_utc, sizeof(buf_utc), "%d/%m/%Y %I:%M %p", tTime);
ITime::FormatTimeStamp(buf_loc, sizeof(buf_loc), "%d/%m/%Y %I:%M %p", tTime, ti);

printf("Time in UTC: %s\n", buf_utc);
printf("Time in Nordeast Brazilien Time: %s\n", buf_loc);
    </code></pre>
</body>
</html>
