
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - tasks_file</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>tasks_file.h</h1>

    <p>
        This library provides assynchronous file operations. It uses STask to execute the
        synchronous operations from interface/file.h in a seperate thread.
	</p>

    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/lib/tasks_file.h<br><br></td></tr>
        <tr><td><b>Classes</b></td><td>
            <a href="#TaskFileWrite">TaskFileWrite</a><br>
            <a href="#TaskFileRead">TaskFileRead</a><br>
            <br>
        </td></tr>
    </table>

	<h1>Classes</h1>

    
    <h2 id="TaskFileWrite">TaskFileWrite</h2>
    <dd>
        Used to write to a file. A file may be created, an existing file replaced or to an existing file
        appended.
    </dd>

    <pre><code class="C++">class TaskFileWrite : public STask {
    void SStart();

    char * workingPath;
    char * fileName;
    bool append;
    class IFileWrite * file;
    byte * buffer;
    unsigned length;
    bool last;

public:
    TaskFileWrite(class STaskContext * context, const char * workingPath, const char * fileName, bool append);
    ~TaskFileWrite();

    void write(byte * buffer, unsigned length, bool last);
    void writeBuffer(byte * buffer, unsigned length, bool last);
};</code></pre>


	
    <h3 class="fnhead" id="TaskFileWrite">TaskFileWrite</h3>

    <dd>
        <p>Contructor. TaskFileWrite uses STask as base class, which means for the operation, first
        the class is allocated with all required parameters and then SStart() is used to start it.
        The TaskProgress, TaskComplete and TaskFailed functions are used to indicate
        progress and completion of the Task.</p>

        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr><td class="param">class STaskContext * <b>context</b></td>
                    <td>
                        An STaskContext must be allocated for the operation. It manages a pool
                        of threads for the execution.
                    </td>
                </tr>
                <tr><td class="param">const char * <b>workingPath</b></td>
                    <td>
                        The path in which the file is written. If parts of the path do not exist
                        the folders are created.
                    </td>
                </tr>
                <tr><td class="param">const char * <b>fileName</b></td>
                    <td>
                        The name of the file to be written. If the file does not exist, it is
                        created.
                    </td>
                </tr>
                <tr><td class="param">bool <b>append</b></td>
                    <td>
                        If true the data is appended to the file, if it already exists, otherwise
                        the file is overwritten
                    </td>
                </tr>
            </table>
        </dd>

    <h3 class="fnhead" id="write">write</h3>

    <dd>
        <p>Write data to the file. May be called after the TaskProgress callback was called, either
        after SStart() or the last write() call.
        The data passed by this function is copied into a new buffer.</p>

        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr><td class="param">byte * <b>buffer</b></td>
                    <td>
                        Buffer containing the data
                    </td>
                </tr>
                <tr><td class="param">unsigned <b>length</b></td>
                    <td>
                        The length of the data in bytes
                    </td>
                </tr>
                <tr><td class="param">bool <b>last</b></td>
                    <td>
                        Indicates that this is the last block of data. The operation completes
                        when this parameter is set to true
                    </td>
                </tr>
            </table>
        </dd>

    <h3 class="fnhead" id="writeBuffer">writeBuffer</h3>

    <dd>
        Same functionality as write, except the data is not copied and the buffer is freed
        after the data is written.
    </dd>

    <h2 id="TaskFileRead">TaskFileRead</h2>

    <dd>
        Used to read from a file.
    </dd>

    <pre><code class="C++">class TaskFileRead : public STask {
    void SStart();

    char * workingPath;
    char * fileName;
    class IFileRead * file;
    byte * buffer;
    unsigned length;
    bool last;
public:
    TaskFileRead(class STaskContext * context, const char * workingPath, const char * fileName, unsigned length, bool last);
    ~TaskFileRead();

    void read(unsigned length, bool last);
    unsigned getLength() { return length; };
    void getData(byte * buffer, unsigned length) { memcpy(buffer, this->buffer, length); };
};</code></pre>



    <h3 class="fnhead" id="TaskFileRead">TaskFileRead</h3>

    <dd>
        <p>
            Contructor. TaskFileRead uses STask as base class, which means for the operation, first
            the class is allocated with all required parameters and then SStart() is used to start it.
            The TaskProgress, TaskComplete and TaskFailed functions are used to indicate
            progress and completion of the Task.
        </p>

        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr><td class="param">class STaskContext * <b>context</b></td>
                    <td>
                        An STaskContext must be allocated for the operation. It manages a pool
                        of threads for the execution.
                    </td>
                </tr>
                <tr><td class="param">const char * <b>workingPath</b></td>
                    <td>
                        The path from which the file is read
                    </td>
                </tr>
                <tr><td class="param">const char * <b>fileName</b></td>
                    <td>
                        The name of the file to be read.
                    </td>
                </tr>
                <tr><td class="param">unsigned <b>length</b></td>
                    <td>
                        The length to be read initially
                    </td>
                </tr>
                <tr><td class="param">bool <b>last</b></td>
                    <td>
                        If true no othe data shall be read after the initial block.
                    </td>
                </tr>
            </table>
        </dd>
    </dl>

    <h3 class="fnhead" id="read">read</h3>

    <dd>
        Initiates reading of the next block of data. May be called after the TaskProgress
        callback was called, either after SStart() or the last read() call.
    </dd>

    <dl>
        <h4>Parameters</h4>
        <dd>
            <table style="margin-left:-12px">
                <tr><td class="param">unsigned <b>length</b></td>
                    <td>
                        The length to be read initially
                    </td>
                </tr>
                <tr><td class="param">bool <b>last</b></td>
                    <td>
                        If true no othe data shall be read after the initial block.
                    </td>
                </tr>
            </table>
        </dd>
    </dl>

    <h3 class="fnhead" id="getLength">getLength</h3>

    <dd>
        Return the actual read length after the TaskProgress call
    </dd>

    <h3 class="fnhead" id="getData">getData</h3>

    <dd>
        Copies the read data.
    </dd>

    <dl>
        <h4>Parameters</h4>
        <dd>
            <table style="margin-left:-12px">
                <tr><td class="param">byte * <b>buffer</b></td>
                    <td>
                        The buffer the data is copied to.
                    </td>
                </tr>
                <tr><td class="param">unsigned <b>length</b></td>
                    <td>
                        The length to be copied.
                    </td>
                </tr>
            </table>
        </dd>
    </dl>
</body>
</html>
