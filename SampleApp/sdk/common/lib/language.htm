<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - Language</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>Language</h1>
    <p>
        Interface to handle translations inside C++ code.<br />
        This library handles translations created with the innovaphone translator (application type App C++).
    </p>
    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/lib/language.h<br><br></td></tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#Language">Language</a><br>
                <br>
            </td>
        </tr>
        <tr>
            <td><b>Data types</b></td>
            <td>
                <a href="#LanguageTableEntry">LanguageTableEntry</a><br>
                <a href="#language_param_type_t">language_param_type_t</a><br>
                <br>
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#ExampleLanguage">Example</a><br>
                <br>
            </td>
        </tr>
    </table>
    <h1>Classes</h1>
    <a name="Language"><h2>Language</h2></a>
    <pre><code class="language-cpp">class Language {
public:
    <a href="#GetLanguageId" style="text-decoration:none;">static int GetLanguageId(const char * lang, LanguageTableEntry languages[], int numLangs, int defaultLang);</a>;
    <a href="#ReplaceArgs" style="text-decoration:none;">static size_t ReplaceArgs(const char * translatedString, char * buffer, size_t bufferLen, ...);</a>;
};</code></pre>

    <h3>Public functions</h3>
    <div class="fnhead" id="GetLanguageId">GetLanguageId</a> (static function)</div>
    <dl>
        <dd>
            This functions returns the array index (language id) of the lang parameter inside the languages array.
            <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr><td class="param">const char * <b>lang </b></td><td>A <code>const char</code> pointer to the currently used language, e.g. 'en' or 'eng'.</td></tr>
                <tr><td class="param"><a href="#LanguageTableEntry">LanguageTableEntry</a> <b>languages[] </b></td><td>An array which holds all available language table entries.</td></tr>
                <tr><td class="param">int <b>numLangs </b></td><td>The number of array elements inside languages[].</td></tr>
                <tr><td class="param">int <b>defaultLang </b></td><td>defaultLang is returned, if lang can't be found.</td></tr>
            </table>

            <h4>Return value</h4>
            The language array index if found or otherwise defaultLang.
        </dd>
    </dl>

    <div class="fnhead" id="ReplaceArgs">ReplaceArgs</a> (static function)</div>
    <dl>
        <dd>
            This function replaces dynamic arguments inside a translated string. A dynamic argument is a string like $1, $2, ... (starting with 1).
            The arguments are handed by specifying their type and their value always as two function parameters.
            You can hand as many parameters as you want.

            <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr><td class="param">const char * <b>translatedString </b></td><td>The already translated string with dynamic arguments, e.g. 'This argument has a size of $1.'</td></tr>
                <tr><td class="param">char * <b>buffer </b></td><td>The output buffer, which will be null terminated.</td></tr>
                <tr><td class="param">size_t <b>bufferLen </b></td><td>The length of the output buffer.</td></tr>
                <tr><td class="param"><a href="#language_param_type_t">language_param_type_t</a> <b>type </b></td><td>The parameter type of the following function parameter.</td></tr>
                <tr><td class="param">? <b>param</b></td><td>The parameter with a type which must be one of <a href="#language_param_type_t">language_param_type_t</a>.</td></tr>
                <tr><td class="param">More duos of language_param_type_t + param</td></tr>
            </table>
            <h4>Return value</h4>
            The length of the string inside the buffer.
        </dd>
    </dl>
    <h1>Data types</h1>
    <h2 id="LanguageTableEntry">LanguageTableEntry</h2>
    <pre><code class="laguage-cpp">typedef struct { 
    const char * lang;              // two char language identifier, e.g. 'en' or 'de'
    const char * utf8;              // the language name in utf8
    const char * langIso639_2;      // three char language identifier after ISO 639-2, e.g. 'eng' or 'deu'
} LanguageTableEntry;</code></pre>

    <h3>Overview</h3>
    The <code class="laguage-cpp">struct LanguageTableEntry</code> holds information about one language.

    <h2 id="language_param_type_t">language_param_type_t</h2>
    <pre><code class="laguage-cpp">typedef enum {
    LANGUAGE_PARAM_TYPE_STRING = 0,
    LANGUAGE_PARAM_TYPE_UINT32,
    LANGUAGE_PARAM_TYPE_INT32,
    LANGUAGE_PARAM_TYPE_UINT64,
    LANGUAGE_PARAM_TYPE_INT64
} language_param_type_t;</code></pre>

    <h3>Overview</h3>
    The <code class="laguage-cpp">enum language_param_type_t</code> specifies all possible parameter types for the function <a href="#ReplaceArgs">ReplaceArgs</a>.

    <h1> Code Example </h1>
    <a name="ExampleLanguage"></a>
    <h3>Example cpp file app_languages.cpp created by the innovaphone translator</h3>
<pre class="sample" style="height:unset"><code class="language-cpp">#include "platform/platform.h"
#include "common/lib/language.h"
#include "app_languages.h"

LanguageTableEntry myLanguageTable[] =  { 
	{ "en", "English", "eng" },
	{ "de", "Deutsch", "deu" },
};

myStringTableEntry myStringTable[] =  { 
	{{	/*   1 - APP_TXT_TEST */
		/* 1-en */ "This is a test.",
		/* 2-de */ "Das ist ein Test.",
	}},
	{{	/*   1 - APP_TXT_TEST2 */
		/* 1-en */ "This is a test with $1 arguments inside $2.",
		/* 2-de */ "Das ist ein Test mit $1 Argumenten in $2.",
	}},
};</code>
  </pre>
    <h3>Example h file app_languages.h created by the innovaphone translator</h3>
<pre class="sample" style="height:unset"><code class="language-cpp">#define APP_LANGUAGE_EN 0
#define APP_LANGUAGE_DE 1
#define APP_NUM_LANGUAGES 2

typedef struct { const char * lang[APP_NUM_LANGUAGES]; } appStringTableEntry;

extern LanguageTableEntry appLanguageTable[APP_NUM_LANGUAGES];
extern appStringTableEntry appStringTable[];

#define APP_TXT_TEST    0
#define APP_TXT_TEST2   1

#define APP_COUNT_TXT_ITEMS 2

#define APP_LANG_STRING(stringId, langId)     appStringTable[stringId].lang[langId]</code>
  </pre>
<h3>Usage</h3>
<pre class="sample" style="height:unset"><code class="language-cpp">int langId = Language::GetLanguageId("de", appLanguageTable, APP_NUM_LANGUAGES, APP_LANGUAGE_EN);
const char * str = APP_LANG_STRING(APP_TXT_TEST, langId);
size_t bufferLen = strlen(str) + strlen("R2D2") + 20; // +20 => unsigned int + terminating zero
char * buffer = (char *)alloca(bufferLen);
Language::ReplaceArgs(str, buffer, bufferLen,
LANGUAGE_PARAM_TYPE_UINT32, 2,
LANGUAGE_PARAM_TYPE_STRING, "R2D2");
debug->printf("%s", str);           // will print "Das ist ein Test mit $1 Argumenten in $2."
debug->printf("%s", buffer);        // will print "Das ist ein Test mit 2 Argumenten in R2D2."
</code>
  </pre>
</body>
</html>
