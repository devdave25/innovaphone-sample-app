<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - WebdavService Implementation</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>WebdavService</h1>
    <p>
        It provides the webdav functionality by getting the request, handle it and sends the answer back through the webserver. 
        There are support for PROPFIND, MKCOL, OPTIONS, MOVE, GET, PUT, DELETE, LOCK, PROPPATCH.
    </p>
    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/lib/webdavService.h<br><br></td></tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#UWebdavNotification">UWebdavNotification</a><br>
                <a href="#WebdavNotification">WebdavNotification</a><br>
                <a href="#UWebdavService">UWebdavService</a><br>
                <a href="#IWebdavServiceTask">IWebdavServiceTask</a><br>
                <a href="#UWebdavServiceTask">UWebdavServiceTask</a><br>
                <a href="#WebdavService">WebdavService</a><br>
                <a href="#WebdavServiceGet">WebdavServiceGet</a><br>
                <a href="#WebdavServicePut">WebdavServicePut</a><br>
                <a href="#WebdavServicePropfind">WebdavServicePropfind</a><br>
                <a href="#WebdavServiceMove">WebdavServiceMove</a><br>
                <a href="#WebdavServiceMkCol">WebdavServiceMkCol</a><br>
                <a href="#WebdavServiceDelete">WebdavServiceDelete</a><br>
                <a href="#WebdavServiceOptions">WebdavServiceOptions</a><br>
                <a href="#WebdavServiceLock">WebdavServiceLock</a><br>
                <a href="#WebdavServiceUnLock">WebdavServiceUnLock</a><br>
                <a href="#WebdavServiceProppatch">WebdavServiceProppatch</a><br>
                <br>
            </td>
        </tr>
    </table>

    <h1>Classes</h1>

    <h2 id="UWebdavNotification">UWebdavNotification</h2>
    
    <p>
        Base class to get notifications if a file is written, moved, or deleted.
    </p>

    <pre><code class="C++">class UWebdavNotification 
{
public:
    virtual void PutCompleted(const char * appName, const char * path, ulong64 id) = 0;
    virtual void DeleteCompleted(const char * appName, const char * path) = 0;
    virtual void MoveCompleted(const char * appName, const char * path) = 0;
};</code></pre>


    <h3 class="fnhead" id="PutCompleted">PutCompleted</h3>
    <dd>
    <p>
        Used to get a notifaction if a file has written.
    </p>

        <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr>
                    <td class="param">const char * <b>appName</b></td>
                    <td>
                        Name of the app.
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * <b>path</b></td>
                    <td>
                        Path of the file.
                    </td>
                </tr>
                <tr>
                    <td class="param">ulong64 <b>id</b></td>
                    <td>
                        Database id from the written file.
                    </td>
                </tr>
            </table>
        </dd>

    <h3 class="fnhead" id="DeleteCompleted">DeleteCompleted</h3>
    <dd>
    <p>
        Used to get a notifaction if a file has deleted.
    </p>

        <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr>
                    <td class="param">const char * <b>appName</b></td>
                    <td>
                        Name of the app.
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * <b>path</b></td>
                    <td>
                        Path of the file.
                    </td>
                </tr>
            </table>
        </dd>

    <h3 class="fnhead" id="MoveCompleted">MoveCompleted</h3>
    <dd>
    <p>
        Used to get a notifaction if a file has moved.
    </p>


        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr>
                    <td class="param">const char * <b>appName</b></td>
                    <td>
                        Name of the app.
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * <b>path</b></td>
                    <td>
                        Path of the file.
                    </td>
                </tr>
            </table>
        </dd>


    <h2 id="WebdavNotification">WebdavNotification</h2>
    <p>
        Internal Class to save apps which are registered for notifications.
    </p>
    <pre><code class="C++">class WebdavNotification : public istd::listElement &lt; WebdavNotification &gt;
{
public:
    class UWebdavNotification * webdavNotification;
    const char * appName;
    WebdavNotification(class UWebdavNotification * notification, const char * appName);
    ~WebdavNotification();
    
};</code></pre>



    <h2 id="UWebdavService">UWebdavService</h2>
    <p>
        Callback Function to get the information that the webdavservice is closed.
    </p>
    <pre><code class="C++">class UWebdavService {
public:
    virtual void WebdavServiceClosed() = 0;
};</code></pre>



    <h3 class="fnhead" id="WebdavServiceClosed">WebdavServiceClosed</h3>

    <p>
        Callback Function.
    </p>

    <h2 id="IWebdavServiceTask">IWebdavServiceTask</h2>
    <p>
        Internal Class closing WebdavService.
    </p>
    <pre><code class="C++">class IWebdavServiceTask {
public:
    virtual void CloseComplete(class UWebdavServiceTask * task) = 0;
};</code></pre>



    <h2 id="UWebdavServiceTask">UWebdavServiceTask</h2>
    <p>
        Internal Class closing WebdavService.
    </p>
    <pre><code class="C++">class UWebdavServiceTask : public istd::listElement&lt;uwebdavservicetask&gt; {
public:
    virtual void Close() = 0;
};</code></pre>



    <h2 id="WebdavService">WebdavService</h2>
    <p>
        Main Class which is responsible for the webdav requests. Used to forward webdav requests and to register for nofifications.
    </p>

    <pre><code class="C++">class WebdavService : public UTask {
    class IDbFiles * dbFiles;
    class IDatabase * database;
    class IInstanceLog * log;
    friend class WebdavServiceGet;
    friend class WebdavServiceGetDBFiles;
    friend class WebdavServicePut;
    friend class WebdavServicePost;
    friend class WebdavServicePropfind;
    friend class WebdavServiceMkCol;
    friend class WebdavServiceMove;
    friend class WebdavServiceCopy;
    friend class WebdavServiceDelete;
    friend class WebdavServiceOptions;
    friend class WebdavServiceLock;
    friend class WebdavServiceUnLock;
    friend class WebdavServiceProppatch;
    bool completed;
    char * webserverPath;
    bool closing;
    
    class istd::list&lt;webdavnotification&gt; notifications;
    class istd::list&lt;webdavlock&gt; locks;
    class istd::list&lt;uwebdavservicetask&gt; tasks;
    class UWebdavService * service;
    char * rootFolder;
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    bool InsertLock(class WebdavLock * lock);
    class WebdavLock * LockLookup(const char * resource);
    class WebdavLock * LockLookup(const char * resource, const char * token);
public:
    WebdavService(class UWebdavService * service, class IDbFiles * dbFiles, class IDatabase * database, class IInstanceLog * const log, const char * webserverPath, const char * rootFolder = 0);
    virtual ~WebdavService();
    bool WebRequestWebdavService(IWebserverPlugin * const webserverPlugin, ws_request_type_t requestType, char * resourceName, size_t dataSize);
    bool GetCompleted() { return completed; }
    void Start();
    void RegisterforNotification(class UWebdavNotification * notification, const char * appName);
    void DeregisterforNotification(class UWebdavNotification * notification);
    void CloseComplete(class UWebdavServiceTask * task);
    void Close();
};</code></pre>



    <h3 class="fnhead" id="WebdavService">WebdavService</h3>
    <dd>
    <p>
        Constructor
    </p>

        <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr>
                    <td class="param">class UWebdavService * <b>service</b></td>
                    <td>
                        Class which is derived from UWebdavService to get callback if WebdavService is closed.
                    </td>
                </tr>
                <tr>
                    <td class="param">class IDbFiles * <b>dbFiles</b></td>
                    <td>
                        Class which is responsible for database accesses.
                    </td>
                </tr>
                <tr>
                    <td class="param">class IDatabase * <b>database</b></td>
                    <td>
                        Database pointer for database initialization.
                    </td>
                </tr>
                <tr>
                    <td class="param">class IInstanceLog * <b>log</b></td>
                    <td>
                        Logging Class.
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * <b>webserverPath</b></td>
                    <td>
                        Webserver Path which is a component of the service args.
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * <b>rootFolder</b></td>
                    <td>
                        Optional. Used to save files not on the root but on an own folder.
                    </td>
                </tr>
            </table>
        </dd>

    <h3 class="fnhead" id="WebRequestWebdavService">WebRequestWebdavService</h3>
    <dd>
    <p>
        Function where the webdav requests are linked in.
    </p>

        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr>
                    <td class="param">IWebserverPlugin * const <b>webserverPlugin</b></td>
                    <td>
                        Interface Class from WebserverPlugin to allow webdavservice 
                    </td>
                </tr>
                <tr>
                    <td class="param">ws_request_type_t <b>type</b></td>
                    <td>
                        request type of the request: GET, PUT ...
                    </td>
                </tr>
                <tr>
                    <td class="param">char * <b>resourceName</b></td>
                    <td>
                        resource which is requested 
                    </td>
                </tr>
                <tr>
                    <td class="param">size_t  <b>dataSize</b></td>
                    <td>
                        Size of the request
                    </td>
                </tr>
            </table>
        </dd>


    <h3 class="fnhead" id="GetCompleted">GetCompleted</h3>

    <p>
        Is webdav service is complete loaded.
    </p>

    <h3 class="fnhead" id="Start">Start</h3>

    <p>
        Starts the connection with the database.
    </p>

    <h3 class="fnhead" id="RegisterforNotification">RegisterforNotification</h3>

    <p>
        Function to register for notifications of the webdav service
    </p>

    <dd>
        <h4>Parameters</h4>

            <table style="margin-left:-12px">
                <tr>
                    <td class="param">class UWebdavNotification *  <b>notification</b></td>
                    <td>
                        Base Class which gets callbacks of webdav service
                    </td>
                </tr>
                <tr>
                    <td class="param">const char * appName <b>appName</b></td>
                    <td>
                        Name of the app.
                    </td>
                </tr>
                
            </table>
        </dd>

    <h3 class="fnhead" id="DeregisterforNotification">DeregisterforNotification</h3>
    <dd>
    <p>
        Function to deregister of notifications.
    </p>

        <h4>Parameters</h4>
            <table style="margin-left:-12px">
                <tr>
                    <td class="param">class UWebdavNotification *  <b>notification</b></td>
                    <td>
                        Base Class which gets callbacks of webdav service
                    </td>
                </tr>

            </table>
        </dd>

    <h3 class="fnhead" id="Close">Close</h3>

    <p>
        Function to close webdav service.
    </p>

    <h2 id="WebdavServiceGet">WebdavServiceGet</h2>
    <p>
        Internal Classes to provide "GET" functionality.
    </p>
    <pre><code class="C++">enum GetStates
{
    GETPATHREQUEST = 0,
    GETREADFILE,
    GETCLOSE
};
class WebdavServiceGetWebserver : public UWebserverGet, public UWebdavServiceTask {
    // UWebserverGet
    void WebserverGetRequestAcceptComplete(IWebserverGet * const webserverGet) override;
    void WebserverGetSendResult(IWebserverGet * const webserverGet) override;
    void WebserverGetCloseComplete(IWebserverGet * const webserverGet) override;
    class IWebserverGet * webserverget;
    class WebdavServiceGet * webdavServiceGet;
public:
    WebdavServiceGetWebserver( class WebdavServiceGet * webdavServiceGet);
    ~WebdavServiceGetWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Send(const void * data, size_t len);
    void SetTransferInfo(wsr_type_t resourceType, size_t dataSize);
    void Close() override;
};
class WebdavServiceGetDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesGet * filesget;
    class IDbFilesPathInfo * pathinfo;
    class WebdavServiceGet * webdavServiceGet;
    class IDbFiles * dbFiles;
public:
    WebdavServiceGetDBFiles(class WebdavServiceGet * webdavServiceGet, class IDbFiles * dbFiles);
    virtual ~WebdavServiceGetDBFiles();
    void LookPath(char * path);
    void GetFile(ulong64 id);
    void ReadFile();
    void Close() override;
};
class WebdavServiceGet : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServiceGetDBFiles * webdavServiceGetDBFiles;
    class WebdavServiceGetWebserver * webdavServiceGetWebserver;
    class WebdavService * webdavservice;
    char * path;
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
public:
    WebdavServiceGet(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path);
    ~WebdavServiceGet();
    void AcceptReceived();
    void PathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void GetCompleted(bool completed);
    void GetProgress(const byte * data, unsigned len);
    void SendResult();
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    bool Cancel(wsr_cancel_type_t type);
    
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0;}
    char * GetPath() { return path ? path : 0; }
};</code></pre>



    <h2 id="WebdavServicePut">WebdavServicePut</h2>
    <p>
        Internal Classes to provide "PUT" functionality.
    </p>
    <pre><code class="C++">enum PutStates
{
    PUTPATHREQUEST = 0,
    PUTPARENTFOLDERREQUEST,
    PUTWRITEFILE,
    PUTCLOSE
};
class WebdavServicePutWebserver : public UWebserverPut, public UWebdavServiceTask {
    // UWebserverPut
    void WebserverPutRequestAcceptComplete(IWebserverPut * const webserverPut) override;
    void WebserverPutSendResult(IWebserverPut * const webserverPut) override;
    void WebserverPutRecvResult(IWebserverPut * const webserverPut, void * buffer, size_t len) override;
    void * WebserverPutRecvBuffer(size_t len) override;
    void WebserverPutRecvCanceled(IWebserverPut * const webserverPut, void * buffer) override;
    void WebserverPutCloseComplete(IWebserverPut * const webserverPut) override;
    class IWebserverPut * webserverPut;
    class WebdavServicePut * webdavServicePut;
public:
    WebdavServicePutWebserver(class WebdavServicePut * webdavServicePut);
    ~WebdavServicePutWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Recv();
    void Send(const void * data, size_t len);
    void SetResultCode(ws_webdav_result_t result);
    bool DataIsChunkEncoded();
    void Close() override;
};
class WebdavServicePutDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesPut * filesput;
    class IDbFilesPathInfo * pathinfo;
    class WebdavServicePut * webdavServicePut;
    class IDbFiles * dbFiles;
public:
    WebdavServicePutDBFiles(class WebdavServicePut * webdavServicePut, class IDbFiles * dbFiles);
    virtual ~WebdavServicePutDBFiles();
    void LookPath(char * path);
    void WriteFile(byte * data, unsigned len, bool last);
    void PutFile(char * filename, ulong64 folder );
    void GetFailed(ulong64 & parent, bool & isFolder, const char * &path);
    ulong64 GetFileId();
    void Close() override;
};
class WebdavServicePut : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServicePutDBFiles * webdavServicePutDBFiles;
    class WebdavServicePutWebserver * webdavServicePutWebserver;
    class WebdavService * webdavservice;
    ulong64 id;
    char * path;
    size_t dataSize;
    char * filename;
    bool chunkEncoded;
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
public:
    WebdavServicePut(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServicePut();
    bool Send(const void * data, size_t len);
    void AcceptReceived();
    void PathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void WriteCompleted(bool completed);
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    void WebserverRecv(void * buffer, size_t len);
    void SendResult();
    void WriteProgress();
    bool Cancel(wsr_cancel_type_t type);
    bool SetTransferInfo(wsr_type_t resourceType, size_t dataSize);
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0; }
    char * GetPath() { return path ? path : 0; }
};</code></pre>



    <h2 id="WebdavServicePropfind">WebdavServicePropfind</h2>
    <p>
        Internal Classes to provide "PROPFIND" functionality.
    </p>
    <pre><code class="C++">enum PropfindStates
{
    PROPFINDPATHREQUEST = 0,
    PROPFINDLIST,
    PROPFINDCOMPLETE,
    PROPFINDCLOSE
};
class WebdavServicePropfindWebserver : public UWebserverPropfind, public UWebdavServiceTask {
    // UWebserverPropfind
    void WebserverPropfindRequestAcceptComplete(IWebserverPropfind * const webserverpropfind) override;
    void WebserverPropfindSendResult(IWebserverPropfind * const webserverPropfind) override;
    void WebserverPropfindRecvResult(IWebserverPropfind * const webserverPropfind, void * buffer, size_t len) override;
    void * WebserverPropfindRecvBuffer(size_t len) override;
    void WebserverPropfindRecvCanceled(IWebserverPropfind * const webserverPropfind, void * buffer) override;
    void WebserverPropfindCloseComplete(IWebserverPropfind * const webserverPropfind) override;
    class IWebserverPropfind * webserverPropfind;
    class WebdavServicePropfind * webdavServicePropfind;
public:
    WebdavServicePropfindWebserver(class WebdavServicePropfind * webdavServicePropfind);
    ~WebdavServicePropfindWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Recv();
    void Send(const void * data, size_t len);
    void SetResultCode(ws_webdav_result_t result, size_t datasize = 0);
    bool DataIsChunkEncoded();
    const char * GetHeaderFieldValue(const char * field);
    void Close() override;
};
class WebdavServicePropfindDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesList * fileslist;
    class IDbFilesPathInfo * pathinfo;
    class WebdavServicePropfind * webdavServicePropfind;
    class IDbFiles * dbFiles;
public:
    WebdavServicePropfindDBFiles(class WebdavServicePropfind * webdavServicePut, class IDbFiles * dbFiles);
    virtual ~WebdavServicePropfindDBFiles();
    void LookPath(char * path);
    void List(ulong64 folderId);
    void Next();
    void Close() override;
};
class WebdavServicePropfind : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServicePropfindDBFiles * webdavServicePropfindDBFiles;
    class WebdavServicePropfindWebserver * webdavServicePropfindWebserver;
    class WebdavService * webdavservice;
    ulong64 id;
    char * path;
    char * rootFolderPath;
    size_t dataSize;
    dword properties;
    dword depth;
    const char * host;
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
    bool propfindComplete;
    dword GetRequestedProperties(void * buffer);
    dword GetDepthHeader();
    const char * GetHostHeader();
    void SendItem(const char * name, unsigned contentlength, bool is_folder, ulong64 created, ulong64 modified);
public:
    WebdavServicePropfind(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path, size_t dataSize, char * rootFolderPath = 0);
    ~WebdavServicePropfind();
    bool Send(const void * data, size_t len);
    void AcceptReceived();
    void PathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void ListCompleted(bool completed);
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    void WebserverRecv(void * buffer, size_t len);
    void SendResult();
    void ListProgress(ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    bool Cancel(wsr_cancel_type_t type);
    
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0; }
    char * GetPath() { return path ? path : 0; }
};
</code></pre>



    <h2 id="WebdavServiceMove">WebdavServiceMove</h2>
    <p>
        Internal Classes to provide "MOVE" functionality.
    </p>
    <pre><code class="C++">enum MoveStates
{
    MOVEPATHREQUESTSOURCE = 0,
    MOVEPATHREQUESTDESTINATION,
    MOVEDELETEDESTINATION,
    MOVEWRITETODESTINATION,
    MOVECLOSE
};
class WebdavServiceMoveWebserver : public UWebserverMove, public UWebdavServiceTask {
    // UWebserverMove
    void WebserverMoveRequestAcceptComplete(IWebserverMove * const webserverMove) override;
    void WebserverMoveSendResult(IWebserverMove * const webserverMove) override;
    void WebserverMoveCloseComplete(IWebserverMove * const webserverMove) override;
    class IWebserverMove * webserverMove;
    class WebdavServiceMove * webdavServiceMove;
public:
    WebdavServiceMoveWebserver(class WebdavServiceMove * webdavServiceMove);
    ~WebdavServiceMoveWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Recv();
    void Send(const void * data, size_t len);
    void SetResultCode(ws_webdav_result_t result, size_t datasize = 0);
    const char * GetHeaderFieldValue(const char * field);
    void Close() override;
};
class WebdavServiceMoveDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesMove * filesMove;
    class WebdavServiceMove * webdavServiceMove;
    class IDbFiles * dbFiles;
    class IDbFilesDel * filesDelete;
    class IDbFilesPathInfo * srcpathinfo;
    class IDbFilesPathInfo * dstpathinfo;
public:
    WebdavServiceMoveDBFiles(class WebdavServiceMove * webdavServiceMove, class IDbFiles * dbFiles);
    virtual ~WebdavServiceMoveDBFiles();
    void LookSrcPath(char * path);
    void LookDstPath(char * path);
    void WriteFile(byte * data, unsigned len, bool last);
    void PutFile(char * filename, ulong64 folder);
    void SrcGetFailed(ulong64 & parent, bool & isFolder, const char * &path);
    void DstGetFailed(ulong64 & parent, bool & isFolder, const char * &path);
    void Delete(ulong64 id);
    void Move(ulong64 id, char * name, ulong64 folder);
    void Close() override;
};
class WebdavServiceMove : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServiceMoveDBFiles * webdavServiceMoveDBFiles;
    class WebdavServiceMoveWebserver * webdavServiceMoveWebserver;
    class WebdavService * webdavservice;
    ulong64 srcId;
    ulong64 parentId;
    
    char * path;
    char * destination;
    char * filename;
    const char * host;
    dword depth;
    bool overwrite;
    bool iscollection;
    size_t dataSize;
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
    dword GetDepthHeader();
    const char * GetDestinationHeader();
    const char * GetHostHeader();
    bool GetOverwriteHeader();
public:
    WebdavServiceMove(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceMove();
    bool Send(const void * data, size_t len);
    void AcceptReceived();
    void SrcPathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void DstPathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void MoveCompleted(bool completed);
    void DeleteCompleted(bool completed);
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    void WebserverRecv(void * buffer, size_t len);
    void SendResult();
    void WriteProgress();
    bool Cancel(wsr_cancel_type_t type);
    bool SetTransferInfo(wsr_type_t resourceType, size_t dataSize);
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0; }
    char * GetPath() { return path ? path : 0; }
};
</code></pre>



    <h2 id="WebdavServiceMkCol">WebdavServiceMkCol</h2>
    <p>
        Internal Classes to provide "MKCOL" functionality.
    </p>
    <pre><code class="C++">enum MkColStates
{
    MKCOLPATHREQUEST = 0,
    MKCOLPARENTFOLDERREQUEST,
    MKCOLNOCOLLECTIONFOUND,
    MKCOLCLOSE
};
class WebdavServiceMkColWebserver : public UWebserverMkCol, public UWebdavServiceTask {
    // UWebserverMkCol
    void WebserverMkColRequestAcceptComplete(IWebserverMkCol * const webserverMkCol) override;
    void WebserverMkColSendResult(IWebserverMkCol * const webserverMkCol) override;
    void WebserverMkColCloseComplete(IWebserverMkCol * const webserverMkCol) override;
    class IWebserverMkCol * webserverMkCol;
    class WebdavServiceMkCol * webdavServiceMkCol;
public:
    WebdavServiceMkColWebserver(class WebdavServiceMkCol * webdavServiceMkCol);
    ~WebdavServiceMkColWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Send(const void * data, size_t len);
    void SetResultCode(ws_webdav_result_t result);
    const char * GetHeaderFieldValue(const char * field);
    void Close() override;
};
class WebdavServiceMkColDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesPut * filesmkcol;
    class IDbFilesPathInfo * pathinfo;
    class WebdavServiceMkCol * webdavServiceMkCol;
    class IDbFiles * dbFiles;
public:
    WebdavServiceMkColDBFiles(class WebdavServiceMkCol * webdavServiceMkCol, class IDbFiles * dbFiles);
    virtual ~WebdavServiceMkColDBFiles();
    void LookPath(char * path);
    void WriteFolder(char * foldername, ulong64 folder);
    void GetFailed(ulong64 & parent, bool & isFolder, const char * &path);
    void Close() override;
};
class WebdavServiceMkCol : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServiceMkColDBFiles * webdavServiceMkColDBFiles;
    class WebdavServiceMkColWebserver * webdavServiceMkColWebserver;
    class WebdavService * webdavservice;
    ulong64 id;
    char * foldername;
    char * path;
    const char * host;
    
    size_t dataSize;
    const char * GetHostHeader();
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
public:
    WebdavServiceMkCol(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceMkCol();
    bool Send(const void * data, size_t len);
    void AcceptReceived();
    void PathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void WriteCompleted(bool completed);
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    void WebserverRecv(void * buffer, size_t len);
    void SendResult();
    bool Cancel(wsr_cancel_type_t type);
    
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0; }
    char * GetPath() { return path ? path : 0; }
};
</code></pre>



    <h2 id="WebdavServiceDelete">WebdavServiceDelete</h2>

    <pre><code class="C++">enum DeleteStates
{
    DELETEPATHREQUEST = 0,
    DELETEREQUEST,
    DELETECLOSE
};
class WebdavServiceDeleteWebserver : public UWebserverDelete, public UWebdavServiceTask {
    // UWebserverDelete
    void WebserverDeleteRequestAcceptComplete(IWebserverDelete * const webserverDelete) override;
    void WebserverDeleteSendResult(IWebserverDelete * const webserverDelete) override;
    void WebserverDeleteCloseComplete(IWebserverDelete * const webserverDelete) override;
    class IWebserverDelete * webserverDelete;
    class WebdavServiceDelete * webdavServiceDelete;
public:
    WebdavServiceDeleteWebserver(class WebdavServiceDelete * webdavServiceDelete);
    ~WebdavServiceDeleteWebserver();
    void Cancel(wsr_cancel_type_t type);
    void Send(const void * data, size_t len);
    void Close() override;
    void SetResultCode(ws_webdav_result_t result, size_t datasize=0);
};
class WebdavServiceDeleteDBFiles : public UTask, public UWebdavServiceTask {
    // UTask
    void TaskComplete(class ITask * const task) override;
    void TaskFailed(class ITask * const task) override;
    void TaskProgress(class ITask * const task, dword progress) override;
    unsigned state;
    class IDbFilesDel * filesDelete;
    class IDbFilesPathInfo * pathinfo;
    class WebdavServiceDelete * webdavServiceDelete;
    class IDbFiles * dbFiles;
public:
    WebdavServiceDeleteDBFiles(class WebdavServiceDelete * webdavServiceDelete, class IDbFiles * dbFiles);
    virtual ~WebdavServiceDeleteDBFiles();
    void LookPath(char * path);
    void Delete(ulong64 id);
    
    void Close() override;
};
class WebdavServiceDelete : public IWebdavServiceTask, public UWebdavServiceTask {
    class WebdavServiceDeleteDBFiles * webdavServiceDeleteDBFiles;
    class WebdavServiceDeleteWebserver * webdavServiceDeleteWebserver;
    class WebdavService * webdavservice;
    ulong64 id;
    bool pathinfocalled;
    char * path;
    
    
    size_t dataSize;
    bool pendingRequestWebserver;
    bool pendingRequestDBFiles;
public:
    WebdavServiceDelete(IWebserverPlugin * const webserverPlugin, class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceDelete();
    void AcceptReceived();
    void PathCompleted(bool completed, ulong64 id, const char * name, unsigned length, bool isFolder, ulong64 created, ulong64 modified);
    void DeleteCompleted(bool completed);
    void SendResult();
    void Close() override;
    void CloseComplete(class UWebdavServiceTask * task) override;
    bool Cancel(wsr_cancel_type_t type);
    
    class WebdavService * GetWebdavService(){ return webdavservice ? webdavservice : 0; }
    char * GetPath() { return path ? path : 0; }
};
</code></pre>

    <p>
        Internal Classes to provide "DELETE" functionality.
    </p>

    <h2 id="WebdavServiceOptions">WebdavServiceOptions</h2>
    <p>
        Internal Classes to provide "OPTIONS" functionality.
    </p>

    <pre><code class="C++">class WebdavServiceOptions : public UWebserverOptions {
    // UWebserverOptions
    void WebserverOptionsRequestAcceptComplete(IWebserverOptions * const webserverOptions) override;
    void WebserverOptionsCloseComplete(IWebserverOptions * const webserverOptions) override;
    class WebdavService * webdavservice;
    class IWebserverOptions * webserveroptions;
public:
    WebdavServiceOptions(class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceOptions();
};
</code></pre>


    <h2 id="WebdavServiceLock">WebdavServiceLock</h2>
    <p>
        Internal Classes to provide "LOCK" functionality.
    </p>
    <pre><code class="C++">class WebdavLock : public istd::listElement<webdavlock> {
public:
    bool write;         // type
    bool exclusive;     // scope
    size_t timeout;
    size_t expires;
    const char * owner;
    const char * owner_href;
    const char * token;
    const char * resource;
    WebdavLock();
    ~WebdavLock();
};
class WebdavServiceLock : public UWebserverLock {
    void WebserverLockRequestAcceptComplete(IWebserverLock * const webserverLock) override;
    void WebserverLockSendResult(IWebserverLock * const webserverLock) override;
    void WebserverLockCloseComplete(IWebserverLock * const webserverLock) override;
    void WebserverLockRecvResult(IWebserverLock * const webserverLock, void * buffer, size_t len) override;
    void * WebserverLockRecvBuffer(size_t len);
    void WebserverLockRecvCanceled(IWebserverLock * const webserverLock, void * buffer) override;
    class WebdavService * webdavservice;
    class IWebserverLock * webserverLock;
    class WebdavLock * GetLockProperties(void * buffer);
    void SendLockResponse(class WebdavLock * lock);
    size_t dataSize;
    char * path;
public:
    WebdavServiceLock(class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceLock();
};
</code></pre>



    <h2 id="WebdavServiceUnLock">WebdavServiceUnLock</h2>
    <p>
        Internal Classes to provide "UNLOCK" functionality.
    </p>
    <pre><code class="C++">class WebdavServiceUnLock : public UWebserverUnlock {
    void WebserverUnlockRequestAcceptComplete(IWebserverUnlock * const webserverUnlock) override;
    void WebserverUnlockSendResult(IWebserverUnlock * const webserverUnlock) override;
    void WebserverUnlockCloseComplete(IWebserverUnlock * const webserverUnlock) override;
    class WebdavService * webdavservice;
    char * path;
    class IWebserverUnlock * webserverUnlock;
public:
    WebdavServiceUnLock(class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceUnLock();
};
</code></pre>



    <h2 id="WebdavServiceProppatch">WebdavServiceProppatch</h2>
    <p>
        Internal Classes to provide "PROPPATCH" functionality.
    </p>
    <pre><code class="C++">class SetProperty : public istd::listElement &lt;setproperty&gt;
{
public:
    char * propname;
    SetProperty(const char * name)
    {
        if (name) this->propname = _strdup(name);
        else this->propname = 0;
    }
    ~SetProperty()
    {
        if (this->propname) free(propname);
    }
};
class RemProperty : public istd::listElement &lt;remproperty&gt;
{
public:
    char * propname;
    RemProperty(const char * name)
    {
        if (name) this->propname = _strdup(name);
        else this->propname = 0;
    }
    ~RemProperty()
    {
        if (this->propname) free(propname);
    }
};
class WebdavServiceProppatch : public UWebserverProppatch {
    void WebserverProppatchRequestAcceptComplete(IWebserverProppatch * const webserverProppatch) override;
    void WebserverProppatchSendResult(IWebserverProppatch * const webserverProppatch) override;
    void WebserverProppatchRecvResult(IWebserverProppatch * const webserverProppatch, void * buffer, size_t len) override;
    void * WebserverProppatchRecvBuffer(size_t len) override;
    void WebserverProppatchRecvCanceled(IWebserverProppatch * const webserverProppatch, void * buffer) override;
    void WebserverProppatchCloseComplete(IWebserverProppatch * const webserverProppatch) override;
    class WebdavService * webdavservice;
    char * path;
    size_t dataSize;
    class IWebserverProppatch * webserverProppatch;
    void GetProppatchProperties(void * buffer);
    void SendProppatchResponse();
    class istd::list&lt;setproperty&gt; setProperties;
    class istd::list&lt;remproperty&gt; remProperties;
public:
    WebdavServiceProppatch(class WebdavService * webdavservice, char * path, size_t dataSize);
    ~WebdavServiceProppatch();
};
</code></pre>



</body>
</html>



